name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ synchronize, opened ]
  pull_request_target:
    branches: [ main ]
    types: [ ready_for_review ]

env:
  NODE_VERSION: 20
  RELEASE_CHANNEL: 'latest/edge'

jobs:

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install Dependencies
        run: npm ci

      - name: Semantic Release
        id: semantic
        uses: codfish/semantic-release-action@v2
        env:
          HUSKY: 0 # Disable Husky hooks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Set Semantic Release Result
        if: always()
        env:
          SEMANTIC_OUTCOME: ${{ steps.semantic.outcome }}
        run: |
          if [ "$SEMANTIC_OUTCOME" == "success" ]; then
            echo "SEMANTIC_RELEASE_STATUS=success" >> $GITHUB_ENV
          else
            echo "SEMANTIC_RELEASE_STATUS=failure" >> $GITHUB_ENV
          fi
          echo "Estatus Semantic Release Result $SEMANTIC_RELEASE_STATUS"

      - name: Get Release Version
        if: always()
        env:
          SEMANTIC_RELEASE_VERSION: ${{ steps.semantic.outputs.release-version }}
        run: |
          if [ -n "$SEMANTIC_RELEASE_VERSION" ]; then
            echo "RELEASE_VERSION=$SEMANTIC_RELEASE_VERSION" >> $GITHUB_ENV
          else
            LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
            if [ -n "$LAST_TAG" ]; then
              echo "RELEASE_VERSION=$LAST_TAG" >> $GITHUB_ENV
            else
              VERSION=$(jq -r '.version' package.json)
              echo "RELEASE_VERSION=v$VERSION" >> $GITHUB_ENV
            fi
          fi
          echo "Detected release version: $RELEASE_VERSION"

      - name: Force Failure
        run: |
          echo "Forzando un error para probar el rollback"
          exit 1

      - name: Rollback on Failure
        if: failure() || env.SEMANTIC_RELEASE_STATUS == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          echo "Initiating rollback due to failure."
          sleep 10
          
          if [ -z "$RELEASE_VERSION" ]; then
            # Intentar obtener la versión del release fallido
            RELEASE_VERSION=$(git tag --points-at HEAD | grep '^v' || echo "")
            if [ -z "$RELEASE_VERSION" ]; then
              # Si no hay etiqueta en HEAD, buscar la última etiqueta
              RELEASE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            fi
          fi
          
          if [ -n "$RELEASE_VERSION" ]; then
            echo "Detected release version: $RELEASE_VERSION"
          
            # Eliminar el release en GitHub
            RELEASE_ID=$(curl -s \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_VERSION" | jq -r .id)
          
            if [ "$RELEASE_ID" != "null" ]; then
              curl -s -X DELETE \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
              echo "Deleted release with ID $RELEASE_ID"
            else
              echo "No release found for tag $RELEASE_VERSION"
            fi
          
            # Eliminar la etiqueta remota
            git push --delete origin $RELEASE_VERSION || true
          
            # Eliminar la etiqueta local
            git tag -d $RELEASE_VERSION || true
          else
            echo "No release version detected. Skipping release and tag deletion."
          fi
          
          # Restablecer al estado del último commit remoto
          git reset --hard origin/main
          
          # Limpiar el directorio de trabajo
          git clean -fd
          
          # Forzar un push para sincronizar con el repositorio remoto
          git push --force || true
