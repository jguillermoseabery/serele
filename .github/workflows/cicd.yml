name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ synchronize, opened ]
  pull_request_target:
    branches: [ main ]
    types: [ ready_for_review ]

env:
  NODE_VERSION: 20
  RELEASE_CHANNEL: 'latest/edge'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout of the repository with all tags and full history
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Importante para obtener todas las etiquetas

      # 2. Installation of 'jq' to process JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 3. Configuration of the Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      # 4. Installation of dependencies
      - name: Install Dependencies
        run: npm ci

      # 5. Execution of Semantic Release
      - name: Semantic Release
        id: semantic
        uses: codfish/semantic-release-action@v2
        env:
          HUSKY: 0 # Deshabilitar hooks de Husky
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true  # Permite que el workflow continúe incluso si este paso falla

      # 6. Capture the result of Semantic Release
      - name: Set Semantic Release Result
        if: always()
        env:
          SEMANTIC_OUTCOME: ${{ steps.semantic.outcome }}
        run: |
          if [ "$SEMANTIC_OUTCOME" == "success" ]; then
            echo "New release was published."
            SEMANTIC_RELEASE_STATUS="success"
          else
            echo "No new release was published."
            SEMANTIC_RELEASE_STATUS="failure"
          fi
      
          # Almacena el estado en GITHUB_ENV para pasos futuros
          echo "SEMANTIC_RELEASE_STATUS=$SEMANTIC_RELEASE_STATUS" >> $GITHUB_ENV
      
          # Imprimir en el mismo paso
          echo "SEMANTIC RELEASE STATUS: $SEMANTIC_RELEASE_STATUS"

      # 7. Retrieve the release version
      - name: Get Release Version
        if: always()
        env:
          SEMANTIC_RELEASE_VERSION: ${{ steps.semantic.outputs.release-version }}
        run: |
          if [ -n "$SEMANTIC_RELEASE_VERSION" ]; then
            # Asegurarse de que la etiqueta tenga el prefijo 'v'
            echo "RELEASE_VERSION=v$SEMANTIC_RELEASE_VERSION" >> $GITHUB_ENV
          else
            # Si no hay salida de Semantic Release, obtener la última etiqueta
            LAST_TAG=$(git describe --tags --abbrev=0 || echo "")
            if [ -n "$LAST_TAG" ]; then
              echo "RELEASE_VERSION=$LAST_TAG" >> $GITHUB_ENV
            else
              # Como último recurso, obtener la versión de package.json
              VERSION=$(jq -r '.version' package.json)
              echo "RELEASE_VERSION=v$VERSION" >> $GITHUB_ENV
            fi
          fi
          echo "Detected release version: $RELEASE_VERSION"

      # 8. Simulation of a failure to test the rollback (Remove in production)
      - name: Force Failure
        if: ${{ steps.semantic.outputs.new-release-published == 'true' }}
        run: |
          echo "Simulation of a failure to test the rollback."
          exit 1

      # 9. Rollback in case of failure
      - name: Rollback on Failure
        if: failure() || env.SEMANTIC_RELEASE_STATUS == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          echo "### Initiating rollback due to failure."
          sleep 5  # Short pause before starting the rollback

          # If RELEASE_VERSION is not defined, attempt to retrieve it
          if [ -z "$RELEASE_VERSION" ]; then
            echo "RELEASE_VERSION is not defined. Attempting to retrieve it from tags."
            # Attempt to get the failed release version from the tag in HEAD
            RELEASE_VERSION=$(git tag --points-at HEAD | grep '^v' || echo "")
            if [ -n "$RELEASE_VERSION" ]; then
              echo "RELEASE_VERSION found in HEAD: $RELEASE_VERSION"
            else
              echo "No tag found in HEAD. Trying to get the latest tag."
              # If no tag is in HEAD, try to get the latest tag
              RELEASE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              if [ -n "$RELEASE_VERSION" ]; then
                echo "Latest tag found: $RELEASE_VERSION"
              else
                echo "No tags found in the repository."
              fi
            fi
          else
            echo "RELEASE_VERSION is already defined: $RELEASE_VERSION"
          fi

          # If a release version is detected, proceed with the rollback
          if [ -n "$RELEASE_VERSION" ]; then
            echo "### Detected release version for rollback: $RELEASE_VERSION"

            # Delete the release on GitHub
            echo "Fetching release ID for tag $RELEASE_VERSION from GitHub."
            RELEASE_ID=$(curl -s \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_VERSION" | jq -r .id)

            if [ "$RELEASE_ID" != "null" ]; then
              echo "Release ID for $RELEASE_VERSION found: $RELEASE_ID. Proceeding to delete release on GitHub."
              curl -s -X DELETE \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
              echo "Deleted release with ID $RELEASE_ID from GitHub."
            else
              echo "No release found on GitHub for tag $RELEASE_VERSION."
            fi

            # Attempting to delete remote tag
            echo "Attempting to delete remote tag $RELEASE_VERSION."
            git push --delete origin $RELEASE_VERSION || echo "Warning: Could not delete remote tag $RELEASE_VERSION."

            # Attempting to delete local tag
            echo "Attempting to delete local tag $RELEASE_VERSION."
            git tag -d $RELEASE_VERSION || echo "Warning: Could not delete local tag $RELEASE_VERSION."
          else
            echo "No release version detected. Skipping release and tag deletion steps."
          fi

          # Reset to the state of the last remote commit
          echo "Resetting local branch to match origin/main."
          git reset --hard origin/main || echo "Error: Failed to reset to origin/main."

          # Clean the working directory of untracked files and directories
          echo "Cleaning the working directory of untracked files and directories."
          git clean -fd || echo "Warning: Failed to clean the working directory."

          # Force push to synchronize with the remote repository
          echo "Force pushing to synchronize local branch with remote repository."
          git push --force || echo "Warning: Force push to remote repository failed."

          echo "###########################################################"
          echo "### ROLLBACK COMPLETED SUCCESSFULLY. EXITING PIPELINE. ###"
          echo "###########################################################"
          exit 0
